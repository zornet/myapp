{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UIC53606\\\\myapp\\\\src\\\\components\\\\WallOfFame.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap';\nimport { Dropdown } from \"react-bootstrap\";\nimport ErrorPage from \"./ErrorPage\";\nimport \"../Styles/WallOfFame.css\";\nimport \"../Styles/ButtonsAndTitles.css\";\nconst issuetypes_rules = {\n  'Problem Report': ['respects_runtime_transitions', 'doesnt_have_children_if_in_invalid_state'],\n  'Story': ['is_linked_to_parent_in_corresponding_state'],\n  'Epic': ['epic doesnt_have_issues_if_in_invalid_state'],\n  'All issuetypes': []\n};\n\nfunction Results(props) {\n  if (props.nrOkIssues === 'not set') {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }\n    }, \" \");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"walloffame-results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Number of ok tickets: \", props.nrOkIssues), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Number of not ok tickets:\", props.nrNotOkIssues));\n}\n\nclass WallOfFame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.makeProjectDropdownItem = function (X) {\n      return /*#__PURE__*/React.createElement(Dropdown.Item, {\n        onClick: () => this.updateSelectedProject(X),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, X);\n    };\n\n    this.makeIssuetypeDropdownItem = function (X) {\n      return /*#__PURE__*/React.createElement(Dropdown.Item, {\n        onClick: () => this.updateSelectedIssuetype(X),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }, X);\n    };\n\n    this.state = {\n      serializedProjects: [],\n      nrOkIssues: 'not set',\n      nrNotOkIssues: 'not set',\n      selectedProject: 'choose project',\n      selectedIssuetype: 'All issuetypes',\n      requestFailed: false,\n      errorMessage: \"\"\n    };\n    this.getSerializedProjects = this.getSerializedProjects.bind(this);\n    this.updateSelectedProject = this.updateSelectedProject.bind(this);\n    this.updateSelectedIssuetype = this.updateSelectedIssuetype.bind(this);\n    this.makeIssuetypeDropdownItem = this.makeIssuetypeDropdownItem.bind(this);\n    this.getResults = this.getResults.bind(this);\n    this.makeProjectDropdownItem = this.makeProjectDropdownItem.bind(this); //calling this in the constructor in order to know what projects are available from the start\n    // console.log(\"urmeaza sa apelez getserializedprojects\");\n    // this.getSerializedProjects();\n    // console.log(this.state.serializedProjects);\n  }\n\n  async getSerializedProjects() {\n    let url = \"http://127.0.0.1:5000/api/PRM-scripts/WallOfFame/serialized-projects\";\n    await axios.get(url).then(response => {\n      this.setState({\n        serializedProjects: response.data,\n        response: response.status\n      });\n    }).catch(error => {\n      this.setState({\n        errorMessage: \"Can't get response from server\"\n      });\n      this.setState({\n        requestFailed: true\n      });\n    });\n  }\n\n  updateSelectedProject(newValue) {\n    this.setState({\n      selectedProject: newValue\n    });\n  }\n\n  updateSelectedIssuetype(newValue) {\n    this.setState({\n      selectedIssuetype: newValue\n    });\n  }\n\n  getResults() {\n    let url = \"http://127.0.0.1:5000/api/PRM-scripts/WallOfFame/get-results\";\n    axios.post(url, {\n      \"project\": this.state.selectedProject,\n      \"issuetypes\": [this.state.selectedIssuetype]\n    }).then(response => {\n      console.log(response.data);\n      this.setState({\n        nrOkIssues: response.data.nr_ok_issues,\n        nrNotOkIssues: response.data.nr_not_ok_issues\n      });\n    }).catch(error => {\n      this.setState({\n        errorMessage: \"Can't get response from server\"\n      });\n      this.setState({\n        requestFailed: true\n      });\n    });\n  }\n\n  render() {\n    if (this.state.requestFailed) return /*#__PURE__*/React.createElement(ErrorPage, {\n      errorText: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 16\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"prm-background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      class: \"script-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, \"WallOfFame\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdowns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown, {\n      className: \"mydropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n      variant: \"success\",\n      id: \"dropdown-basic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, this.state.selectedProject), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, this.state.serializedProjects.map(this.makeProjectDropdownItem))), /*#__PURE__*/React.createElement(Dropdown, {\n      className: \"mydropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n      variant: \"success\",\n      id: \"dropdown-basic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, this.state.selectedIssuetype), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, Object.keys(issuetypes_rules).map(this.makeIssuetypeDropdownItem))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"scripts-btn\",\n      disabled: this.state.selectedProject === 'choose project',\n      onClick: this.getResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, \"Go\"))), /*#__PURE__*/React.createElement(Results, {\n      nrOkIssues: this.state.nrOkIssues,\n      nrNotOkIssues: this.state.nrNotOkIssues,\n      project: this.state.selectedProject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  async componentDidMount() {\n    console.log(\"FROM DIDMOUNT\");\n    console.log(\"urmeaza sa apelez getserializedprojects\");\n    await this.getSerializedProjects();\n    console.log(this.state.serializedProjects);\n  }\n\n}\n\nexport default WallOfFame;","map":{"version":3,"sources":["C:/Users/UIC53606/myapp/src/components/WallOfFame.js"],"names":["React","axios","Button","Dropdown","ErrorPage","issuetypes_rules","Results","props","nrOkIssues","nrNotOkIssues","WallOfFame","Component","constructor","makeProjectDropdownItem","X","updateSelectedProject","makeIssuetypeDropdownItem","updateSelectedIssuetype","state","serializedProjects","selectedProject","selectedIssuetype","requestFailed","errorMessage","getSerializedProjects","bind","getResults","url","get","then","response","setState","data","status","catch","error","newValue","post","console","log","nr_ok_issues","nr_not_ok_issues","render","map","Object","keys","componentDidMount"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from 'axios';\r\nimport { Button } from 'react-bootstrap'\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport ErrorPage from \"./ErrorPage\";\r\nimport \"../Styles/WallOfFame.css\"\r\nimport \"../Styles/ButtonsAndTitles.css\"\r\n\r\nconst issuetypes_rules = {\r\n    'Problem Report': ['respects_runtime_transitions', 'doesnt_have_children_if_in_invalid_state'],\r\n    'Story': ['is_linked_to_parent_in_corresponding_state'],\r\n    'Epic': ['epic doesnt_have_issues_if_in_invalid_state'],\r\n    'All issuetypes': []\r\n}\r\n\r\n\r\nfunction Results(props){\r\n    if(props.nrOkIssues === 'not set'){\r\n        return(\r\n          <p> </p>  \r\n        );\r\n    }\r\n    return(\r\n        <div class=\"walloffame-results\">\r\n            <h3>Number of ok tickets: {props.nrOkIssues}</h3>\r\n            <h3>Number of not ok tickets:{props.nrNotOkIssues}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass WallOfFame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            serializedProjects: [],\r\n            nrOkIssues: 'not set',\r\n            nrNotOkIssues: 'not set',\r\n            selectedProject: 'choose project',\r\n            selectedIssuetype: 'All issuetypes',\r\n            requestFailed: false,\r\n            errorMessage: \"\"\r\n        }\r\n        this.getSerializedProjects = this.getSerializedProjects.bind(this);\r\n        this.updateSelectedProject = this.updateSelectedProject.bind(this);\r\n        this.updateSelectedIssuetype = this.updateSelectedIssuetype.bind(this);\r\n        this.makeIssuetypeDropdownItem = this.makeIssuetypeDropdownItem.bind(this);\r\n        this.getResults = this.getResults.bind(this);\r\n        this.makeProjectDropdownItem = this.makeProjectDropdownItem.bind(this);\r\n\r\n        //calling this in the constructor in order to know what projects are available from the start\r\n        // console.log(\"urmeaza sa apelez getserializedprojects\");\r\n        // this.getSerializedProjects();\r\n        // console.log(this.state.serializedProjects);\r\n    }\r\n    async getSerializedProjects() {\r\n        let url = \"http://127.0.0.1:5000/api/PRM-scripts/WallOfFame/serialized-projects\";\r\n        await axios.get(url)\r\n            .then(response => {\r\n                this.setState({ serializedProjects: response.data,\r\n                    response : response.status  });\r\n            }).catch(error => {\r\n                this.setState({errorMessage: \"Can't get response from server\"});\r\n                this.setState({requestFailed: true});\r\n            });\r\n    }\r\n\r\n    updateSelectedProject(newValue) {\r\n        this.setState({ selectedProject: newValue });\r\n    }\r\n    makeProjectDropdownItem = function (X) {\r\n        return (\r\n            <Dropdown.Item onClick={() => this.updateSelectedProject(X)}>{X}</Dropdown.Item>\r\n        );\r\n    }\r\n    updateSelectedIssuetype(newValue) {\r\n        this.setState({ selectedIssuetype: newValue });\r\n    }\r\n    makeIssuetypeDropdownItem = function (X) {\r\n        return (\r\n            <Dropdown.Item onClick={() => this.updateSelectedIssuetype(X)}>{X}</Dropdown.Item>\r\n        );\r\n    }\r\n    getResults(){\r\n        let url = \"http://127.0.0.1:5000/api/PRM-scripts/WallOfFame/get-results\"\r\n        axios.post(url,{\r\n            \"project\": this.state.selectedProject,\r\n            \"issuetypes\": [this.state.selectedIssuetype]\r\n        }).then(response => {\r\n            console.log(response.data);\r\n            this.setState({ nrOkIssues: response.data.nr_ok_issues,\r\n                            nrNotOkIssues: response.data.nr_not_ok_issues});\r\n        }).catch(error => {\r\n            this.setState({errorMessage: \"Can't get response from server\"});\r\n            this.setState({requestFailed: true});\r\n            \r\n          });\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.requestFailed)\r\n        return <ErrorPage errorText = {this.state.errorMessage}/>\r\n        return (\r\n            <div className=\"prm-background\">\r\n                <h1 class=\"script-title\">WallOfFame</h1>\r\n                <div class=\"dropdowns\">\r\n                    <Dropdown   className='mydropdown'>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {this.state.selectedProject}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {this.state.serializedProjects.map(this.makeProjectDropdownItem)}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown  className='mydropdown'>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {this.state.selectedIssuetype}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            {Object.keys(issuetypes_rules).map(this.makeIssuetypeDropdownItem)}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <div>\r\n                        <Button className='scripts-btn' disabled={this.state.selectedProject === 'choose project'} onClick={this.getResults}>Go</Button>\r\n                    </div>\r\n                </div>\r\n                {/* <div>\r\n                    <Button disabled={this.state.selectedProject == 'choose project'}>Go</Button>\r\n                </div> */}\r\n                {/* <Greetings project={this.state.selectedProject} issuetype={this.state.selectedIssuetype}></Greetings> */}\r\n                <Results  nrOkIssues={this.state.nrOkIssues} nrNotOkIssues={this.state.nrNotOkIssues} project={this.state.selectedProject}></Results>\r\n            </div>\r\n        );\r\n    }\r\n    async componentDidMount() {\r\n        console.log(\"FROM DIDMOUNT\");\r\n        console.log(\"urmeaza sa apelez getserializedprojects\");\r\n        await this.getSerializedProjects();\r\n        console.log(this.state.serializedProjects);\r\n    }\r\n}\r\n\r\n\r\nexport default WallOfFame;\r\n"]},"metadata":{},"sourceType":"module"}